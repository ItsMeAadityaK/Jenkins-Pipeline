pipeline {
    agent any

    environment {
        RECIPIENT_EMAIL = 'kulkarniaadi65@gmail.com'
    }

    stages {
        stage('Compile') {
            steps {
                echo 'Initiating the build process with Maven...'
                // sh 'mvn clean package'
            }
        }
        stage('Execute Unit and Integration Tests') {
            steps {
                echo 'Executing unit and integration tests using JUnit and Selenium frameworks...'
                // sh 'mvn test'
            }
            post {
                success {
                    emailext(
                        subject: "SUCCESS: Unit & Integration Tests - ${env.JOB_NAME} Build #${env.BUILD_NUMBER}",
                        body: """<p>The unit and integration tests for project <b>${env.JOB_NAME}</b> have successfully passed.</p>
                                 <p>Logs have been attached for further reference.</p>""",
                        to: "${RECIPIENT_EMAIL}",
                        mimeType: 'text/html',
                        attachLog: true
                    )
                }
                failure {
                    emailext(
                        subject: "FAILURE: Unit & Integration Tests - ${env.JOB_NAME} Build #${env.BUILD_NUMBER}",
                        body: """<p>The unit and integration tests for project <b>${env.JOB_NAME}</b> encountered an error.</p>
                                 <p>Kindly review the attached logs for detailed information.</p>""",
                        to: "${RECIPIENT_EMAIL}",
                        mimeType: 'text/html',
                        attachLog: true
                    )
                }
            }
        }
        stage('Static Code Analysis') {
            steps {
                echo 'Starting static code analysis with SonarQube...'
                // sh 'sonar-scanner'
            }
        }
        stage('Security Assessment') {
            steps {
                echo 'Conducting security assessment using OWASP Dependency-Check...'
                // sh 'dependency-check --scan .'
            }
            post {
                success {
                    emailext(
                        subject: "SUCCESS: Security Assessment - ${env.JOB_NAME} Build #${env.BUILD_NUMBER}",
                        body: """<p>The security assessment for <b>${env.JOB_NAME}</b> has been completed successfully.</p>
                                 <p>Please check the attached logs for further details.</p>""",
                        to: "${RECIPIENT_EMAIL}",
                        mimeType: 'text/html',
                        attachLog: true
                    )
                }
                failure {
                    emailext(
                        subject: "FAILURE: Security Assessment - ${env.JOB_NAME} Build #${env.BUILD_NUMBER}",
                        body: """<p>The security scan for <b>${env.JOB_NAME}</b> failed.</p>
                                 <p>Attached are the logs for your review.</p>""",
                        to: "${RECIPIENT_EMAIL}",
                        mimeType: 'text/html',
                        attachLog: true
                    )
                }
            }
        }
        stage('Stage Deployment') {
            steps {
                echo 'Deploying application to staging environment using AWS CLI...'
                // sh 'aws deploy your-app-staging'
            }
        }
        stage('Staging Environment Tests') {
            steps {
                echo 'Executing integration tests in the staging environment using Selenium/Postman...'
                // sh './run-integration-tests.sh'
            }
        }
        stage('Production Deployment') {
            steps {
                echo 'Deploying application to production environment using AWS CLI...'
                // sh 'aws deploy your-app-production'
            }
        }
    }

    post {
        success {
            emailext(
                subject: "SUCCESS: Jenkins Pipeline Execution - ${env.JOB_NAME} Build #${env.BUILD_NUMBER}",
                body: """<p>The Jenkins pipeline for project <b>${env.JOB_NAME}</b> has successfully completed.</p>
                         <p>Logs have been attached for your review.</p>""",
                to: "${RECIPIENT_EMAIL}",
                mimeType: 'text/html',
                attachLog: true
            )
        }
        failure {
            emailext(
                subject: "FAILURE: Jenkins Pipeline Execution - ${env.JOB_NAME} Build #${env.BUILD_NUMBER}",
                body: """<p>The Jenkins pipeline for project <b>${env.JOB_NAME}</b> encountered an error and failed.</p>
                         <p>Please check the attached logs for more information.</p>""",
                to: "${RECIPIENT_EMAIL}",
                mimeType: 'text/html',
                attachLog: true
            )
        }
        always {
            echo 'Pipeline execution has completed.'
        }
    }
}
